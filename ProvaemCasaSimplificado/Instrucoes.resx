<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Aguardando" xml:space="preserve">
    <value>Aguardando nova Jogada e/ou Operação.</value>
  </data>
  <data name="CartaNaoLancada" xml:space="preserve">
    <value>Carta não foi lançada, por favor jogue uma carta.</value>
  </data>
  <data name="CartasCompradasMaquina" xml:space="preserve">
    <value>Maquina comprou {0} cartas.</value>
  </data>
  <data name="Comandos" xml:space="preserve">
    <value>I - Informa as regras do Jogo.
D - Mostra os Comandos disponíveis
S - Mostra as cartas em seu poder.
C - Compra uma carta adicional para continuar o jogo.
R - Mostra a carta que você terá de igualar.
J - Mostra a carta em seu poder e Habilita digitar o nº da carta desejada para o jogo.
N - Começa um novo Jogo.
X - Finaliza o Jogo.</value>
  </data>
  <data name="Desafio" xml:space="preserve">
    <value>Jogue uma carta para desafiar o participante.</value>
  </data>
  <data name="Inicio" xml:space="preserve">
    <value>Bem vindo ao Jogo de Cartas GRADDA

Instruções:

Neste jogo vc sempre jogará contra o computador.
Você receberá 7 cartas iniciais.
O objetivo é finalizar todas as cartas que estiverem com você.
Para isto, é necessário que apresente uma carta igual a que estiver sido mostrada pela máquina.
Caso não tenha a carta igual a mostrada pela máquina, deverá comprar uma carta para continuar jogando.
Você terá de comprar uma carta até o conseguir apresentar uma carta de mesmo naipe apresentada pela Máquina.

Ganha o jogo quem:

- Ficar sem nenhuma carta.
- Ficar com menor quantidade de cartas ao final, caso as cartas do baralho acabem.

Utilize os comandos abaixo para executar as operações básica.

I - Mostra as regras do Jogo.
D - Mostra os comandos
S - Mostra as cartas em seu poder.
C - Compra uma carta adicional para continuar o jogo.
R - Mostra a carta que você terá de igualar.
J - Mostra a carta em seu poder e permite digitar o nº da carta desejada para o jogo.
N - Começa um novo Jogo.
X - Finaliza o Jogo. 
Y - Mostra as cartas da Máquina (para testar a aplicação)</value>
  </data>
  <data name="JogadaErro" xml:space="preserve">
    <value>Jogada inválida, selecione outra carta ou compre do baralho.</value>
  </data>
  <data name="JogadaMaquina" xml:space="preserve">
    <value>Carta Jogada: {0}</value>
  </data>
  <data name="JogadaSucesso" xml:space="preserve">
    <value>Jogada realizada com sucesso</value>
  </data>
  <data name="Jogar" xml:space="preserve">
    <value>Digite o número da carta que deseja Jogar :</value>
  </data>
  <data name="MostrarCartaRetirada" xml:space="preserve">
    <value>Carta Retirada - {0}</value>
  </data>
  <data name="NovaJogada" xml:space="preserve">
    <value>Sua vez de iniciar a jogada.</value>
  </data>
  <data name="OperacaoInvalida" xml:space="preserve">
    <value>Este comando não existe, escolha entre um dos comandos listados:</value>
  </data>
  <data name="Perdedor" xml:space="preserve">
    <value>Você perdeu. Tente outra vez :-(</value>
  </data>
  <data name="Vencedor" xml:space="preserve">
    <value>Você ganhou. Parabéns, você é o cara!!! :-)</value>
  </data>
</root>